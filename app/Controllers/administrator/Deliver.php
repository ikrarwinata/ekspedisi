<?php
namespace App\Controllers\administrator;
/**
* Auto Generated By TrigerIgniter v1
* Codeigniter Version 4.1.x
* Codeigniter Controller
**/

use App\Models\Deliver_model;
use App\Controllers\BaseController;
use App\Models\Kurir_model;
use App\Models\Master_model;

class Deliver extends BaseController
{
    protected $model; //Default Models Of this Controler

    /**
     * Class constructor.
     */ 
    public function __construct()
    {
        $this->model = new Deliver_model(); //Set Default Models Of this Controller
        $this->Template = $this->defaultTemplate(); //Template Of this Page
        $this->pager = \Config\Services::pager(); // Pagination
        $this->validation =  \Config\Services::validation();
    }

    // This event executed after constructor
    protected function onLoad(){
        $this->PageData->parent = "administrator/Deliver";
        $this->PageData->header = (session()->has("level") ? NULL : ucfirst(str_replace("_", '', session("level"))) . " :: ") . 'Deliver';
        $this->PageData->access = ["administrator"];
        // check access level
        if (! $this->access_allowed()) {
            session()->setFlashdata("ci_login_flash_message", 'Login session outdate. Please re-Login !');
            session()->setFlashdata("ci_login_flash_message_type", "text-danger");
            throw new \CodeIgniter\Router\Exceptions\RedirectException();
        };
    
    }

    //TEMPLATE OF THIS PAGE
    private function defaultTemplate()
    {
        return (object) [
            'container' => 'administrator/_templates/Container',
            'header' => 'administrator/_templates/header',
            'navbar' => 'administrator/_templates/navbar',
            'sidebar' => 'administrator/_templates/sidebar',
            'footer' => 'administrator/_templates/footer',
        ];
    }
    
    private function access_allowed(){
        $allowed = FALSE;
        if (count($this->PageData->access)==0) return TRUE;
        if (! session()->has("level"))  return FALSE;
        foreach ($this->PageData->access as $key => $value) {
            if(session("level")==$value){
                $allowed=TRUE;
                break;
            }
        };
        return $allowed;
    }

    //DELETE
    public function set_valid($id = NULL)
    {
        $id = $id == NULL ? $this->request->getPostGet("resi") : base64_decode(urldecode($id));
        $row = $this->model->getById($id);

        if ($row && $id != NULL) {

            $this->model->update($id, ["valid" => 1]);
            return redirect()->back();
        } else {
            session()->setFlashdata('ci_flash_message', 'Sorry... This data is missing !');
            session()->setFlashdata('ci_flash_message_type', ' alert-danger ');
            return redirect()->back();
        }
    }

    //INDEX
    public function index($isDone = TRUE)
    {
        //indexstart

        $ds = $this->model->select("COUNT(resi) AS c")->where("valid", 0)->first()->c;
        session()->set("d_success", $ds);
        // Table sorting using GET var
        $sortcolumn = $this->request->getGetPost("sortcolumn");
        $sortorder = $this->request->getGetPost("sortorder");
        if ($sortcolumn == NULL || $sortorder == NULL){
            if (session()->has("sorting_table")) {
                if (session("sorting_table")==$this->model->table) {
                    $sortcolumn = session("sortcolumn");
                    $sortorder = session("sortorder");
                };
            };
        }else{
            $sortcolumn = base64_decode($sortcolumn);
        }
        if ($sortcolumn != NULL && $sortorder != NULL) {
            $sortorder = strtoupper($sortorder);
            if ($sortorder != "DESC" && $sortorder != "ASC") $sortorder = "ASC";
            if (in_array($sortcolumn, $this->model->getFields())){
                $this->model->order = $sortorder;
                $this->model->columnIndex = $sortcolumn;
                session()->set('sortcolumn', $sortcolumn);
                session()->set('sortorder', $sortorder);
                session()->set('sorting_table', $this->model->table);
            }else{
                $sortcolumn = NULL;
                $sortorder = NULL;
                session()->remove('sortcolumn');
                session()->remove('sortorder');
                session()->remove('sorting_table');
            }
        }

        // How many data shows each page
        $perPage = $this->request->getPostGet("perPage");
        if ($perPage == NULL) {
            if (session()->has("paging_table")) {
                if (session("paging_table")==$this->model->table) {
                    $perPage = session("perPage");
                };
            };
        };
        if ($perPage != NULL) {
            // Minimum data per-page = 2
            if ($perPage <= 0) $perPage = 2;
            session()->set('perPage', $perPage);
            session()->set('paging_table', $this->model->table);
        }else{
            // Default data per-page = 20
            $perPage = 20;
            session()->remove('paging_table');
            session()->remove('perPage');
        }

        $page = $this->request->getGet("page");
        $page = $page<=0?1:$page;
        $keyword = $this->request->getGetPost("keyword");

        if ($isDone) {
            $this->PageData->title = "Riwayat Delivery Barang";
            $this->PageData->subtitle = [
                $this->PageData->title => 'administrator/Deliver/index'
            ];
            $this->PageData->url = "administrator/Deliver/index";
            $this->model->where("valid", 1);
            $totalrecord = $this->model->getData($keyword)->countAllResults();
            $this->model->where("valid", 1);
        } else {
            $this->PageData->title = "Verifikasi Delivery";
            $this->PageData->subtitle = [
                $this->PageData->title => 'administrator/Deliver/verifikasi'
            ];
            $this->PageData->url = "administrator/Deliver/verifikasi";
            $this->model->where("valid", 0);
            $totalrecord = $this->model->getData($keyword)->countAllResults();
            $this->model->where("valid", 0);
        }
        

        $data = [
            'sortcolumn' => $sortcolumn,
            'sortorder' => $sortorder,
            'data' => $this->model->getData($keyword)->paginate($perPage),
            'perPage' => $perPage,
            'currentPage' => $page,
            'start' => min(($page*$perPage)-($perPage-1), $totalrecord),
            'end' => min(($perPage*$page), $totalrecord),
            'totalrecord' => $totalrecord,
            'pager' => $this->model->pager,
            'keyword' => $keyword,
            'Page' => $this->PageData,
            'Template' => $this->Template
        ];
        return view('administrator/deliver/deliver_list', $data);
        //endindex
    }

    public function verifikasi()
    {
        return $this->index(FALSE);
    }

    //READfunction
    public function read($id=NULL)
    {
        $id = $id==NULL?$this->request->getPostGet("id"):base64_decode(urldecode($id));

        $this->PageData->header .= ' :: Detail';
        $this->PageData->title = "Deliver Detail";
        $this->PageData->subtitle = [
            'Deliver' => 'administrator/Deliver/index',
            'Detail' => 'administrator/Deliver/read/' . urlencode(base64_encode($id)),
        ];
        $this->PageData->url = "administrator/Deliver/read/" . urlencode(base64_encode($id));
        
        $dataFind = $this->model->getById($id);

        if($dataFind == FALSE || $id == NULL){
            session()->setFlashdata('ci_flash_message', 'Sorry... This data is missing !');
            session()->setFlashdata('ci_flash_message_type', ' alert-danger ');
            return redirect()->to(base_url($this->PageData->parent . '/index'));
        }
        $data = [
            'data' => $this->model->getById($id), //getById on data
            'Page' => $this->PageData,
            'Template' => $this->Template
        ];
        return view('administrator/deliver/deliver_read', $data);
    }

    //CREATEfunction
    public function create($resi = NULL)
    {
        if ($resi != NULL) $resi = base64_decode(urldecode($resi));
        $this->PageData->header .= ' :: ' . 'Delivery Barang';
        $this->PageData->title = "Add Stock Delivery Kurir";
        $this->PageData->subtitle = [
            'Delivery' => 'administrator/Deliver/index',
            'Create New Item' => 'administrator/Deliver/create',
        ];
        $this->PageData->url = "administrator/Deliver/create";
        $master = new Master_model();
        $kurir = new Kurir_model();
        $data = [
            'data' => (object) [
                'id' => set_value('id', generateId("DLVR")),
                'resi' => set_value('resi', $resi),
                'username_kurir' => set_value('username_kurir'),
                'tanggal' => set_value('tanggal'),
                'status' => set_value('status'),
                'keterangan' => set_value('keterangan')
            ],
            'listResi' => $master->where("status", 1)->findAll(),
            'listKurir' => $kurir->findAll(),
            'disableResi' => FALSE,
            'action' => site_url($this->PageData->parent.'/createAction'),
            'Page' => $this->PageData,
            'Template' => $this->Template
        ];
        return view('administrator/deliver/deliver_form', $data);
    }
    
    //ACTIONCREATEfunction
    public function createAction()
    {
        if($this->isRequestValid() == FALSE){
            return $this->create();
        };

        $data = [
            'id' => generateId("DLVR"),
            'resi' => $this->request->getPost('resi'),
            'username_kurir' => $this->request->getPost('username_kurir'),
            'tanggal' => strtotime("now"),
            'status' => 0,
            'keterangan' => NULL,
        ];
        
        $this->model->insert($data);
        $m = new Master_model();
        $m->update($this->request->getPost('resi'), ['status' => 2]);
        session()->setFlashdata('ci_flash_message', 'Create item success !');
        session()->setFlashdata('ci_flash_message_type', ' alert-success ');
        return redirect()->to(base_url($this->PageData->parent . '/index'));
    }

    //UPDATEfunction
    public function update($id = NULL)
    {
        $id = $id == NULL ? $this->request->getPostGet("id") : base64_decode(urldecode($id));

        $this->PageData->header .= ' :: ' . 'Update Item';
        $this->PageData->title = "Update Delivery Barang";
        $this->PageData->subtitle = [
            'Delivery' => 'administrator/Deliver/index',
            'Update Delivery Item' => 'administrator/Deliver/update' . urlencode(base64_encode($id)),
        ];
        $this->PageData->url = "administrator/Deliver/update" . urlencode(base64_encode($id));

        $dataFind = $this->model->getById($id);

        if ($dataFind == FALSE || $id == NULL) {
            session()->setFlashdata('ci_flash_message', 'Sorry... This data is missing !');
            session()->setFlashdata('ci_flash_message_type', ' alert-danger ');
            return redirect()->to(base_url($this->PageData->parent . '/index'));
        }
        $master = new Master_model();
        $kurir = new Kurir_model();
        $data = [
            'data' => (object) [
                'id' => set_value('id', $dataFind->id),
                'resi' => set_value('resi', $dataFind->resi),
                'hp' => set_value('hp', $dataFind->hp),
                'harga' => set_value('harga', $dataFind->harga),
            ],
            'listResi' => $master->where("status", 1)->orWhere("resi", $dataFind->resi)->findAll(),
            'listKurir' => $kurir->findAll(),
            'disableResi' => TRUE,
            'action' => site_url($this->PageData->parent . '/updateAction'),
            'Page' => $this->PageData,
            'Template' => $this->Template
        ];
        return view('administrator/deliver/deliver_form', $data);
    }

    //ACTIONUPDATEfunction
    public function updateAction()
    {
        $id = $this->request->getPostGet('oldid');
        $dataFind = $this->model->getById($id);

        if ($dataFind == FALSE || $id == NULL) {
            session()->setFlashdata('ci_flash_message', 'Sorry... This data is missing !');
            session()->setFlashdata('ci_flash_message_type', ' alert-danger ');
            return redirect()->to(base_url($this->PageData->parent . '/index'));
        };

        $data = [
            'harga' => $this->request->getPost('harga'),
            'hp' => $this->request->getPost('hp'),
        ];

        $this->model->update($id, $data);
        session()->setFlashdata('ci_flash_message', 'Update item success !');
        session()->setFlashdata('ci_flash_message_type', ' alert-success ');
        return redirect()->to(base_url($this->PageData->parent . '/verifikasi'));
    }

    //DELETE
    public function delete($id=NULL)
    {
        $id = $id == NULL ? $this->request->getPostGet("id") : base64_decode(urldecode($id));
        $row = $this->model->getById($id);

        if ($row && $id != NULL) {
            if (isset($row->foto)) {
                if ($row->foto != NULL) {
                    safeUnlink($row->foto);
                    safeUnlink($row->thumbnail);
                }
            }

            $master = new Master_model();
            $master->delete($row->resi);            
            $this->model->delete($id);
            session()->setFlashdata('ci_flash_message', 'Delete item success !');
            session()->setFlashdata('ci_flash_message_type', ' alert-success ');
            return redirect()->to(base_url($this->PageData->parent . '/index'));
        } else {
            session()->setFlashdata('ci_flash_message', 'Sorry... This data is missing !');
            session()->setFlashdata('ci_flash_message_type', ' alert-danger ');
            return redirect()->to(base_url($this->PageData->parent . '/index'));
        }
    }

    //DELETEBATCH
    public function deleteBatch()
    {
        $arr = $this->request->getPost("removeme");
        $res = 0;
        if ($arr!=NULL) {
            if (count($arr)>=1) {
                foreach ($arr as $key => $id) {
                    $row = $this->model->getById($id);
                    if (! $row || $id == NULL) continue;
                    
                    $this->model->delete($id);
                    $res++;
                }
            }
        }

        session()->setFlashdata('ci_flash_message', "$res data deleted !");
        session()->setFlashdata('ci_flash_message_type', ' alert-success ');
        return redirect()->to(base_url($this->PageData->parent . '/index'));
    }

    //TRUNCATE
    public function truncate()
    {
        $this->model->truncate();
        session()->setFlashdata('ci_flash_message', 'Data truncated !');
        session()->setFlashdata('ci_flash_message_type', ' alert-success ');
        return redirect()->to(base_url($this->PageData->parent . '/index'));
    }

    // FORMVALIDATION
    private function isRequestValid(){
        $res = FALSE;

        $this->validation->setRules([
                'resi' => 'trim|max_length[50]',
                'username_kurir' => 'trim|required|max_length[50]',
        ]);

        if ($this->validation->withRequest($this->request)->run() == TRUE) {
            $res = TRUE;
        }else{
            $errors = $this->validation->getErrors();
            foreach ($errors as $key => $value) {
                session()->setFlashdata('ci_flash_message_'.$key, $value);
                session()->setFlashdata('ci_flash_message_'.$key.'_type', 'is-invalid');
            }
        }
        return $res;
    }

    //PRINTfunction
    public function printAll(){
        // Table sorting using GET var
        $sortcolumn = $this->request->getGetPost("sortcolumn");
        $sortorder = $this->request->getGetPost("sortorder");
        if ($sortcolumn == NULL || $sortorder == NULL){
            if (session()->has("sorting_table")) {
                if (session("sorting_table")==$this->model->table) {
                    $sortcolumn = session("sortcolumn");
                    $sortorder = session("sortorder");
                };
            };
        }else{
            $sortcolumn = base64_decode($sortcolumn);
        }
        if ($sortcolumn != NULL && $sortorder != NULL) {
            if ($sortorder != "DESC" && $sortorder != "ASC") $sortorder = "ASC";
            if(in_array($sortcolumn, $this->model->getFields())){
                $this->model->order = $sortorder;
                $this->model->columnIndex = $sortcolumn;
            }
        }

        $this->PageData->title = "Deliver Data";
        $this->PageData->subtitle = ["Deliver", "Print All"];
        $this->PageData->url = "administrator/Deliver/printAll/";

        $data = array(
            'Page' => $this->PageData,
            'data' => $this->model->sort()->findAll(),
            'start' => 0
        );
        
        return view('administrator/deliver/deliver_print', $data);
    }
    
    //ENDFUNCTION
}
